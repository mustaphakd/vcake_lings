<?php
/**
 * Prjct: Vhealings
 * User: musta
 * Date: 4/28/2017
 * Time: 10:38 PM
 */

namespace Wrsft\Test\TestCase\Controller\Component;


use Cake\Core\Configure;
use Cake\TestSuite\IntegrationTestCase;
use Cake\Controller\Controller;
use Cake\Controller\ComponentRegistry;
use Cake\Event\Event;
use Cake\Network\Request;
use Cake\Network\Response;
use Cake\Network\Session;
use Cake\Utility\Text;
use Wrsft\Controller\Component\WrsftAuthComponent;

class WrsftAuthComponentTest extends IntegrationTestCase
{
    public $component;
    public $controller;
    public $request;

    public $fixtures = ['plugin.Wrsft.Users', 'plugin.Wrsft.Roles'];
    public $autoFixtures = false;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->request = new Request();
        $response = new Response();

        $this->controller = $this->getMockBuilder('Cake\Controller\Controller')
            ->setConstructorArgs([$this->request, $response])
            ->setMethods(null)
            ->getMock();

        $registry = new ComponentRegistry($this->controller);
        $this->component = new WrsftAuthComponent($registry);
    }

    public function testAnonymousNotInAnyRole(){
        $result = $this->component->inRoles(self::getRoles());
        $this->assertFalse($result, 'Anonymous User should not have any role defined');
    }

    public function testUSerHasRole(){

        $this->constructRequestSession();

        $result = $this->component->inRoles([self::getRoles()[1]]);
        $this->assertTrue($result, 'User should have \'Citoyen\' role defined');
    }

    public function testUserDoesNotHaveRole(){

        $this->constructRequestSession();

        $result = $this->component->inRoles([self::getRoles()[2]]);
        pr($result);
        $this->assertFalse($result, 'User should not have \'bandit\' role defined');
    }

    public function testLoginUserSucceed(){

        $this->ArrangeActLoginUser("audrey@wrsft.com", "password");

        $user = $this->component->user();

        $this->assertNotNull(
            $user,
            "WrsftAuthComponentTest::testLoginUserSucceed User could not be authenticated");

        $this->assertTrue(
            $this->component->hasRole(
                "policier",
                $user),
            "WrsftAutComponent::TestLoginUserSucceeded User supposed to have policier role");

        $this->assertTrue(
            $this->component->hasRole(
                "citoyen",
                $user),
            "WrsftAutComponent::TestLoginUserSucceeded User supposed to have citoyen role");

        $this->assertTrue(
            $this->component->hasRole(
                "boulanger",
                $user),
            "WrsftAutComponent::TestLoginUserSucceeded User supposed to have boulanger role");

    }

    public function testLoginUserFails(){

        $this->ArrangeActLoginUser("audrey@wrsft.com", "wrongPassword");

        $this->assertNull(
            $this->component->user(),
            "WrsftAuthComponentTest::testLoginUserFails User should not be authenticated");

    }

    private static function getRoles(){

        return ['policier', 'citoyen', 'bandit', 'observer'];
    }

    protected function constructRequestSession()
    {
        $tempSession = new Session();
        $tempSession->write('Auth', [
            'User' => [
                'id' => Text::uuid(),
                'username' => 'testname',
                'roles' => [
                    self::getRoles()[1],
                    self::getRoles()[0]
                ]
            ]]);


        $this->component->request->session($tempSession);
    }

    protected function ArrangeActLoginUser($userName, $password)
    {
        $this->fixtures = ['plugin.Wrsft.Users', 'plugin.Wrsft.Roles'];

        $fixtureMngr = $this->fixtureManager;
        $wrsftAuthComponenttestObj = $this;

        call_user_func(\Closure::bind(
            function () use ($fixtureMngr, $wrsftAuthComponenttestObj) {
                call_user_func(array($fixtureMngr, "_loadFixtures"), $wrsftAuthComponenttestObj);
            },
            null,
            $fixtureMngr
        ));

        $this->fixtures[] = 'plugin.Wrsft.RolesUsers';

        $uids = Configure::read('Fixture.Wrsft.Users');

        Configure::write(
            'Fixture.Wrsft.UsersRoles',
            [
                ["user_id" => $uids[0], "role_id" => 1],
                ["user_id" => $uids[0], "role_id" => 2],
                ["user_id" => $uids[0], "role_id" => 5]
            ]);

        call_user_func(\Closure::bind(
            function () use ($fixtureMngr, $wrsftAuthComponenttestObj) {
                call_user_func(array($fixtureMngr, "_loadFixtures"), $wrsftAuthComponenttestObj);
            },
            null,
            $fixtureMngr
        ));

        $this->loadFixtures("Users", "Roles", "RolesUsers");

        $this->request->data = [
            "email" => $userName,
            "password" => $password
        ];

        $request = $this->request;

        call_user_func(
            \Closure::bind(
                function () use ($request) {
                    $request->_environment = [
                        'REQUEST_METHOD' => "POST",
                        "ORIGINAL_REQUEST_METHOD" => "POST"
                    ];
                },
                null,
                $request
            )
        );

        $this->component->loginUser();
    }

}